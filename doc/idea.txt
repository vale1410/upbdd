here some ideas: 

which key value map to use?
* first shot: boost::unordered_map -> easily replaceable with others after
* tommyD
* trie 
* google spares hashmap

garbage collection: 
* first use boost::shared_prt, overhead ulong (64bit)
* maybe later: boost::intrusive_ptr is the right thing to use?

for testing:
* memory leaks: http://valgrind.org/info/about.html

parallel
* using boost::thread for a selection of heuristics. after N rounds, do join() on all and compute conjunction of feedback. 
* heuristic: low first, high first, random, every second ( trying to hit centre. most implications. deepest edge, non deepest edge. 

search feedback: 
* is it a special kind of bdd that is return by one run?
* is the conjunction of these return bdds, again a special class? 

reorder thoughts:
* how do we reorder with implications?



return value of search:
* (FINISHED|STOPPED|UNSATIFIABLE), ImpBdd result, ImpBdd rest)

class ImpBdd {

Imp::ConstSP imp;
Bdd::ConstSP bdd; 

}

